#!/usr/bin/env node

'use strict';

process.title = 'figlet';

const usage = (() => {
    let path = require('path');

    let location = require.resolve("figlet");
    location = path.join(location, "..", "/../fonts/");
    
    return [
        'Usage: $0 "text to print"',
        `Fonts: ${location}`,
    ].join('\n\n');
})();

var figlet = require('figlet'),
    optimist = require('optimist')
    .usage(usage)
    .alias('h', 'help')
    .alias('v', 'version')
    .alias('l', 'list')
    .describe('l', 'List all the available fonts')
    .alias('e', 'examples')
    .describe('e', 'Print an example in all available fonts')
    .alias('f', 'font')
    .describe('f', 'A string value that indicates the FIGlet font to use')
    .alias('ff', 'fontfile')
    .describe('ff', 'A string value that specifies the FIGlet font file to use. Can be local or URL')
    .describe('horizontal-layout', 'A string value that indicates the horizontal layout to use')
    .describe('vertical-layout', 'A string value that indicates the vertical layout to use');

var argv = optimist.argv;
var text = argv._.join(' ');
var options = {};

if (argv.version) {
    return console.log(require('../package.json').version);
}

if (argv.list) {
    figlet.fonts(function(err, fonts) {
        if (err) {
          console.log('something went wrong...');
          console.dir(err);
          return;
        }
        fonts.forEach(function(font) {
            console.log(font);
        });
    });
    return;
}

if (argv.examples) {
    figlet.fonts(function(err, fonts) {
        if (err) {
          console.log('something went wrong...');
          console.dir(err);
          return;
        }
        fonts.forEach(function(font) {
            figlet(font, { font: font }, function(err, data) {
                if (err) {
                    console.log('something went wrong...');
                    console.dir(err);
                    return;
                }
                data = data.replace(/%/g, '%%');
                console.log(data);
            });
        });
    });
    return;
}

if (!text || argv.help) {
    return console.log(optimist.help());
}

if (argv.font && argv.fontfile) {
    return console.log('The options --font and --fontfile are mutually exclusive');
}

if (argv.font) options.font = argv.font

new Promise(function(resolve, reject) {
    if (argv.fontfile) {
        const url = require('url');
        try {
            const location = new url.URL(argv.fontfile);
            switch(location.protocol) {
                case 'http:':
                case 'https:':
                    const https = require('https');
                    https.get(location, (res) => {
                        let data = '';
                        res.on('data', (chunk) => {
                            data += chunk;
                        });
                        res.on('end', () => {
                            figlet.parseFont('customfont', data);
                            options.font = 'customfont';
                            resolve();
                        });
                        res.on('error', reject);
                    });
                    break;
                case 'file:':
                    const fs = require('fs');
                    fs.readFile(location, 'utf8', (err, data) => {
                        if (err) {
                            reject(err);
                        } else {
                            figlet.parseFont('customfont', data);
                            options.font = 'customfont';
                            resolve();
                        }
                    });
                    break;
                default:
                    reject(new Error(`Unsupported protocol: ${location.protocol}`));
                    break;
            }
        } catch (e) {
            const fs = require('fs');
            fs.readFile(argv.fontfile, 'utf8', (err, data) => {
                if (err) {
                    reject(err);
                } else {
                    figlet.parseFont('customfont', data);
                    options.font = 'customfont';
                    resolve();
                }
            });
        }
    } else {
        resolve();
    }
}).then(function() {
    if (argv['horizontal-layout']) options.horizontalLayout = argv['horizontal-layout']
    if (argv['vertical-layout']) options.verticalLayout = argv['vertical-layout']
    
    figlet(text, options, function(err, data) {
        if (err) {
            console.log('Something went wrong...');
            console.dir(err);
            return;
        }
        data = data.replace(/%/g, '%%');
        console.log(data);
    });
}).catch(function(err) {
    console.log('Something went wrong...');
    console.dir(err);
    return;
});